/* For this project, I downloaded Spotify data from Kaggle.
Then I created a table to insert Spotify data into.
Finally, I performed analytics on the data using SQL. 

Creating the table: */

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

/* Then I inserted the Spotify Data .csv into the table.
Next, I explored the data using the following SQL. */


SELECT * FROM Spotifydata;

/* I want to label the varing degrees of popularity for these songs. 
First I will find the average popularity, then label the songs based on 
this average. */

SELECT avg(popularity)
FROM Spotifydata;

SELECT artist_name, track_name, popularity,
CASE
    WHEN popularity <= (86.8 - 6) THEN 'Below Average Popularity'
    WHEN popularity <= (86.8 - 2) THEN 'Slightly Below Average Popularity'
    WHEN popularity > (86.8 + 6) THEN 'Most Popular' 
    WHEN popularity >= (86.8+ 2) THEN 'Above Average Popularity'  
    ELSE 'Average Popularity'  
    END AS popularity_range
FROM Spotifydata
GROUP BY track_name
Order By popularity;

/* How does each song's popularity compare to the average popularity of this Top 50 list? */
SELECT artist_name, track_name, popularity - (SELECT avg(popularity) FROM Spotifydata) AS comparable_to_avg_popularity
FROM Spotifydata
ORDER BY comparable_to_avg_popularity DESC;

/* How many songs featured another artist? */

SELECT COUNT(track_name) AS songs_with_feat
FROM Spotifydata
WHERE track_name LIKE "%feat%"
OR track_name LIKE "%(with%";

/* Which artists had the most top 50 songs? */

SELECT artist_name, COUNT(artist_name) AS top50_songs
FROM Spotifydata
GROUP BY artist_name
HAVING top50_songs > 1
ORDER BY top50_songs DESC;

/* What was the average speechiness to the top 10 most danceable songs? */
SELECT avg(speechiness)
FROM (SELECT * 
FROM Spotifydata 
ORDER BY danceability DESC 
LIMIT 10);

/* What was the average duration for the 10 most popular songs? */

SELECT AVG(duration_ms) AS avg_duration_top10
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;

/* Which artist had the most "speechiness" to their songs? */

SELECT artist_name, AVG(speechiness) AS avg_speechiness
FROM Spotifydata
GROUP BY artist_name
ORDER BY avg_speechiness DESC
LIMIT 1;

/* Assuming the scoring is on a comparable scale, is song popularity more correlated to 'danceability' or 'energy'? */
SELECT ROUND(AVG(danceability*100)) AS avg_danceability, 
ROUND(AVG(energy*100)) AS avg_energy
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 10;


/* What were the 10 longest songs on this list, and how did it correlate to its ranking in the top 50? */
SELECT id,artist_name, track_name, duration_ms
FROM Spotifydata
ORDER BY duration_ms DESC
LIMIT 10;

/* What about the inverse? What were the 10 shortest songs and their ranking in the top 50? */
SELECT id,artist_name, track_name, duration_ms
FROM Spotifydata
ORDER BY duration_ms ASC
LIMIT 10;
