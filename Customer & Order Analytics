/* In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. */ 

/* How many orders were placed in January? */
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

/* How many of those orders were for an iPhone? */
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
AND Product = 'iPhone';


/* Select the customer account numbers for all the orders that were placed in February. */ 
SELECT DISTINCT cust.acctnum
FROM customers cust
INNER JOIN FebSales feb
ON cust.order_id = feb.orderID
WHERE LENGTH(feb.orderID) = 6
AND feb.orderID <> 'Order ID';


/* Which product was the cheapest one sold in January, and what was the price? */
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE price in (SELECT min(price) FROM BIT_DB.JanSales);

/* OR I could run a query using ORDER BY and LIMIT 1 */
SELECT distinct product, price
FROM BIT_DB.JanSales
ORDER BY price ASC LIMIT 1;


/* What is the total revenue for each product sold in January? */
SELECT Product, SUM(quantity)* price AS jan_revenue
FROM BIT_DB.JanSales
WHERE Product IS NOT NULL
AND Product <> ''
AND Product <> 'Product'
GROUP BY Product
ORDER BY jan_revenue DESC;

/* Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, 
how many of each were sold, and what was the total revenue? */
SELECT Product, SUM(Quantity), SUM(Quantity) * price AS total_revenue
FROM FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

/* How many customers ordered more than 2 products at a time in February, 
and what was the average amount spent for those customers? */
SELECT COUNT(DISTINCT c.acctnum) AS total_customers, ROUND(AVG(f.Quantity * f.price), 2) AS avg_amount_spent
FROM BIT_DB.FebSales f
LEFT JOIN BIT_DB.customers c
ON f.orderID = c.order_id
WHERE f.Quantity > 2
AND LENGTH(f.orderID) = 6
AND f.orderID <> "ORDER ID";

/* When were orders made between 2/13 and 2/18 of 2019? */
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

/* What was the location of the order made on Feb. 18, 2019 at 01:35 AM? */
SELECT location
FROM FebSales
WHERE orderdate = '02/18/19 01:35';

/* How many orders were made on Feb. 18, 2019? */
SELECT sum(quantity) AS "Orders Made on Feb 18, 2019"
FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%';

/* Which battery products were sold in February? */
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%batteries%';

/* List all the products sold in Los Angeles in February, and 
include how many of each were sold. */

SELECT Product, SUM(Quantity)
FROM FebSales
WHERE location LIKE "%Los Angeles%"
GROUP BY Product
ORDER BY SUM(Quantity) DESC;

/* Which locations in New York received at least 3 orders in January, and how many orders did they each receive? */
SELECT distinct location, SUM(Quantity) AS total_orders
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderID) = 6
AND orderID <> 'Order ID'
Group By location
HAVING total_orders >= 3
ORDER BY total_orders DESC;


/*How many of each type of headphone were sold in February? */
SELECT distinct product, SUM(Quantity) AS total_quantity
FROM BIT_DB.FebSales
WHERE product like '%headphone%'
GROUP BY product;


/* What was the average amount spent per account in February? */

SELECT ROUND(SUM(f.quantity * f.price) / COUNT(c.acctnum), 2) AS avg_acct_spend
FROM BIT_DB.FebSales f
LEFT JOIN BIT_DB.customers c
ON f.orderID = c.order_id
WHERE f.orderID <> "Order ID"
AND length(f.orderID) = 6;


/* What was the average quantity of products purchased per account in February? */
SELECT SUM(f.quantity)/COUNT(c.acctnum) AS avg_quantity_purchased
FROM BIT_DB.FebSales f
LEFT JOIN BIT_DB.customers c
ON f.orderID = c.order_id
WHERE f.orderID <> "Order ID"
AND length(f.orderID) =6;


/* Which product brought in the most revenue in January and how much revenue did it bring in total? */
SELECT product, SUM(Quantity*price) AS revenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY revenue DESC
LIMIT 1;


/* 
